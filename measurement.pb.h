// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: measurement.proto

#ifndef PROTOBUF_INCLUDED_measurement_2eproto
#define PROTOBUF_INCLUDED_measurement_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_measurement_2eproto 

namespace protobuf_measurement_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_measurement_2eproto
namespace ProtoMeas {
class Bearing;
class BearingDefaultTypeInternal;
extern BearingDefaultTypeInternal _Bearing_default_instance_;
class Measurements;
class MeasurementsDefaultTypeInternal;
extern MeasurementsDefaultTypeInternal _Measurements_default_instance_;
class Position;
class PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
}  // namespace ProtoMeas
namespace google {
namespace protobuf {
template<> ::ProtoMeas::Bearing* Arena::CreateMaybeMessage<::ProtoMeas::Bearing>(Arena*);
template<> ::ProtoMeas::Measurements* Arena::CreateMaybeMessage<::ProtoMeas::Measurements>(Arena*);
template<> ::ProtoMeas::Position* Arena::CreateMaybeMessage<::ProtoMeas::Position>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ProtoMeas {

// ===================================================================

class Position : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ProtoMeas.Position) */ {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(Position&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Position* other);
  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return CreateMaybeMessage<Position>(NULL);
  }

  Position* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:ProtoMeas.Position)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_measurement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Bearing : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ProtoMeas.Bearing) */ {
 public:
  Bearing();
  virtual ~Bearing();

  Bearing(const Bearing& from);

  inline Bearing& operator=(const Bearing& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Bearing(Bearing&& from) noexcept
    : Bearing() {
    *this = ::std::move(from);
  }

  inline Bearing& operator=(Bearing&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Bearing& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bearing* internal_default_instance() {
    return reinterpret_cast<const Bearing*>(
               &_Bearing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Bearing* other);
  friend void swap(Bearing& a, Bearing& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Bearing* New() const final {
    return CreateMaybeMessage<Bearing>(NULL);
  }

  Bearing* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Bearing>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Bearing& from);
  void MergeFrom(const Bearing& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bearing* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double az = 1;
  void clear_az();
  static const int kAzFieldNumber = 1;
  double az() const;
  void set_az(double value);

  // double el = 2;
  void clear_el();
  static const int kElFieldNumber = 2;
  double el() const;
  void set_el(double value);

  // @@protoc_insertion_point(class_scope:ProtoMeas.Bearing)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double az_;
  double el_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_measurement_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Measurements : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ProtoMeas.Measurements) */ {
 public:
  Measurements();
  virtual ~Measurements();

  Measurements(const Measurements& from);

  inline Measurements& operator=(const Measurements& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Measurements(Measurements&& from) noexcept
    : Measurements() {
    *this = ::std::move(from);
  }

  inline Measurements& operator=(Measurements&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Measurements& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Measurements* internal_default_instance() {
    return reinterpret_cast<const Measurements*>(
               &_Measurements_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Measurements* other);
  friend void swap(Measurements& a, Measurements& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Measurements* New() const final {
    return CreateMaybeMessage<Measurements>(NULL);
  }

  Measurements* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Measurements>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Measurements& from);
  void MergeFrom(const Measurements& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Measurements* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoMeas.Position feature_points = 2;
  int feature_points_size() const;
  void clear_feature_points();
  static const int kFeaturePointsFieldNumber = 2;
  ::ProtoMeas::Position* mutable_feature_points(int index);
  ::google::protobuf::RepeatedPtrField< ::ProtoMeas::Position >*
      mutable_feature_points();
  const ::ProtoMeas::Position& feature_points(int index) const;
  ::ProtoMeas::Position* add_feature_points();
  const ::google::protobuf::RepeatedPtrField< ::ProtoMeas::Position >&
      feature_points() const;

  // repeated .ProtoMeas.Bearing bearings = 3;
  int bearings_size() const;
  void clear_bearings();
  static const int kBearingsFieldNumber = 3;
  ::ProtoMeas::Bearing* mutable_bearings(int index);
  ::google::protobuf::RepeatedPtrField< ::ProtoMeas::Bearing >*
      mutable_bearings();
  const ::ProtoMeas::Bearing& bearings(int index) const;
  ::ProtoMeas::Bearing* add_bearings();
  const ::google::protobuf::RepeatedPtrField< ::ProtoMeas::Bearing >&
      bearings() const;

  // uint32 num_feature_points = 1;
  void clear_num_feature_points();
  static const int kNumFeaturePointsFieldNumber = 1;
  ::google::protobuf::uint32 num_feature_points() const;
  void set_num_feature_points(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoMeas.Measurements)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ProtoMeas::Position > feature_points_;
  ::google::protobuf::RepeatedPtrField< ::ProtoMeas::Bearing > bearings_;
  ::google::protobuf::uint32 num_feature_points_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_measurement_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Position

// double x = 1;
inline void Position::clear_x() {
  x_ = 0;
}
inline double Position::x() const {
  // @@protoc_insertion_point(field_get:ProtoMeas.Position.x)
  return x_;
}
inline void Position::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:ProtoMeas.Position.x)
}

// double y = 2;
inline void Position::clear_y() {
  y_ = 0;
}
inline double Position::y() const {
  // @@protoc_insertion_point(field_get:ProtoMeas.Position.y)
  return y_;
}
inline void Position::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:ProtoMeas.Position.y)
}

// double z = 3;
inline void Position::clear_z() {
  z_ = 0;
}
inline double Position::z() const {
  // @@protoc_insertion_point(field_get:ProtoMeas.Position.z)
  return z_;
}
inline void Position::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:ProtoMeas.Position.z)
}

// -------------------------------------------------------------------

// Bearing

// double az = 1;
inline void Bearing::clear_az() {
  az_ = 0;
}
inline double Bearing::az() const {
  // @@protoc_insertion_point(field_get:ProtoMeas.Bearing.az)
  return az_;
}
inline void Bearing::set_az(double value) {
  
  az_ = value;
  // @@protoc_insertion_point(field_set:ProtoMeas.Bearing.az)
}

// double el = 2;
inline void Bearing::clear_el() {
  el_ = 0;
}
inline double Bearing::el() const {
  // @@protoc_insertion_point(field_get:ProtoMeas.Bearing.el)
  return el_;
}
inline void Bearing::set_el(double value) {
  
  el_ = value;
  // @@protoc_insertion_point(field_set:ProtoMeas.Bearing.el)
}

// -------------------------------------------------------------------

// Measurements

// uint32 num_feature_points = 1;
inline void Measurements::clear_num_feature_points() {
  num_feature_points_ = 0u;
}
inline ::google::protobuf::uint32 Measurements::num_feature_points() const {
  // @@protoc_insertion_point(field_get:ProtoMeas.Measurements.num_feature_points)
  return num_feature_points_;
}
inline void Measurements::set_num_feature_points(::google::protobuf::uint32 value) {
  
  num_feature_points_ = value;
  // @@protoc_insertion_point(field_set:ProtoMeas.Measurements.num_feature_points)
}

// repeated .ProtoMeas.Position feature_points = 2;
inline int Measurements::feature_points_size() const {
  return feature_points_.size();
}
inline void Measurements::clear_feature_points() {
  feature_points_.Clear();
}
inline ::ProtoMeas::Position* Measurements::mutable_feature_points(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoMeas.Measurements.feature_points)
  return feature_points_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoMeas::Position >*
Measurements::mutable_feature_points() {
  // @@protoc_insertion_point(field_mutable_list:ProtoMeas.Measurements.feature_points)
  return &feature_points_;
}
inline const ::ProtoMeas::Position& Measurements::feature_points(int index) const {
  // @@protoc_insertion_point(field_get:ProtoMeas.Measurements.feature_points)
  return feature_points_.Get(index);
}
inline ::ProtoMeas::Position* Measurements::add_feature_points() {
  // @@protoc_insertion_point(field_add:ProtoMeas.Measurements.feature_points)
  return feature_points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoMeas::Position >&
Measurements::feature_points() const {
  // @@protoc_insertion_point(field_list:ProtoMeas.Measurements.feature_points)
  return feature_points_;
}

// repeated .ProtoMeas.Bearing bearings = 3;
inline int Measurements::bearings_size() const {
  return bearings_.size();
}
inline void Measurements::clear_bearings() {
  bearings_.Clear();
}
inline ::ProtoMeas::Bearing* Measurements::mutable_bearings(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoMeas.Measurements.bearings)
  return bearings_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoMeas::Bearing >*
Measurements::mutable_bearings() {
  // @@protoc_insertion_point(field_mutable_list:ProtoMeas.Measurements.bearings)
  return &bearings_;
}
inline const ::ProtoMeas::Bearing& Measurements::bearings(int index) const {
  // @@protoc_insertion_point(field_get:ProtoMeas.Measurements.bearings)
  return bearings_.Get(index);
}
inline ::ProtoMeas::Bearing* Measurements::add_bearings() {
  // @@protoc_insertion_point(field_add:ProtoMeas.Measurements.bearings)
  return bearings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoMeas::Bearing >&
Measurements::bearings() const {
  // @@protoc_insertion_point(field_list:ProtoMeas.Measurements.bearings)
  return bearings_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoMeas

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_measurement_2eproto
