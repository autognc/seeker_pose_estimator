// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pose.proto

#ifndef PROTOBUF_INCLUDED_pose_2eproto
#define PROTOBUF_INCLUDED_pose_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_pose_2eproto 

namespace protobuf_pose_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_pose_2eproto
namespace ProtoPose {
class Attitude;
class AttitudeDefaultTypeInternal;
extern AttitudeDefaultTypeInternal _Attitude_default_instance_;
class Pose;
class PoseDefaultTypeInternal;
extern PoseDefaultTypeInternal _Pose_default_instance_;
class Position;
class PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
}  // namespace ProtoPose
namespace google {
namespace protobuf {
template<> ::ProtoPose::Attitude* Arena::CreateMaybeMessage<::ProtoPose::Attitude>(Arena*);
template<> ::ProtoPose::Pose* Arena::CreateMaybeMessage<::ProtoPose::Pose>(Arena*);
template<> ::ProtoPose::Position* Arena::CreateMaybeMessage<::ProtoPose::Position>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ProtoPose {

// ===================================================================

class Position : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ProtoPose.Position) */ {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(Position&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Position* other);
  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return CreateMaybeMessage<Position>(NULL);
  }

  Position* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:ProtoPose.Position)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pose_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Attitude : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ProtoPose.Attitude) */ {
 public:
  Attitude();
  virtual ~Attitude();

  Attitude(const Attitude& from);

  inline Attitude& operator=(const Attitude& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Attitude(Attitude&& from) noexcept
    : Attitude() {
    *this = ::std::move(from);
  }

  inline Attitude& operator=(Attitude&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Attitude& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Attitude* internal_default_instance() {
    return reinterpret_cast<const Attitude*>(
               &_Attitude_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Attitude* other);
  friend void swap(Attitude& a, Attitude& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Attitude* New() const final {
    return CreateMaybeMessage<Attitude>(NULL);
  }

  Attitude* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Attitude>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Attitude& from);
  void MergeFrom(const Attitude& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Attitude* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double qw = 1;
  void clear_qw();
  static const int kQwFieldNumber = 1;
  double qw() const;
  void set_qw(double value);

  // double qx = 2;
  void clear_qx();
  static const int kQxFieldNumber = 2;
  double qx() const;
  void set_qx(double value);

  // double qy = 3;
  void clear_qy();
  static const int kQyFieldNumber = 3;
  double qy() const;
  void set_qy(double value);

  // double qz = 4;
  void clear_qz();
  static const int kQzFieldNumber = 4;
  double qz() const;
  void set_qz(double value);

  // @@protoc_insertion_point(class_scope:ProtoPose.Attitude)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double qw_;
  double qx_;
  double qy_;
  double qz_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pose_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Pose : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ProtoPose.Pose) */ {
 public:
  Pose();
  virtual ~Pose();

  Pose(const Pose& from);

  inline Pose& operator=(const Pose& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pose(Pose&& from) noexcept
    : Pose() {
    *this = ::std::move(from);
  }

  inline Pose& operator=(Pose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Pose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pose* internal_default_instance() {
    return reinterpret_cast<const Pose*>(
               &_Pose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Pose* other);
  friend void swap(Pose& a, Pose& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pose* New() const final {
    return CreateMaybeMessage<Pose>(NULL);
  }

  Pose* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Pose>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Pose& from);
  void MergeFrom(const Pose& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ProtoPose.Position pos = 1;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 1;
  private:
  const ::ProtoPose::Position& _internal_pos() const;
  public:
  const ::ProtoPose::Position& pos() const;
  ::ProtoPose::Position* release_pos();
  ::ProtoPose::Position* mutable_pos();
  void set_allocated_pos(::ProtoPose::Position* pos);

  // .ProtoPose.Attitude att = 2;
  bool has_att() const;
  void clear_att();
  static const int kAttFieldNumber = 2;
  private:
  const ::ProtoPose::Attitude& _internal_att() const;
  public:
  const ::ProtoPose::Attitude& att() const;
  ::ProtoPose::Attitude* release_att();
  ::ProtoPose::Attitude* mutable_att();
  void set_allocated_att(::ProtoPose::Attitude* att);

  // double time_stamp = 3;
  void clear_time_stamp();
  static const int kTimeStampFieldNumber = 3;
  double time_stamp() const;
  void set_time_stamp(double value);

  // @@protoc_insertion_point(class_scope:ProtoPose.Pose)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ProtoPose::Position* pos_;
  ::ProtoPose::Attitude* att_;
  double time_stamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pose_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Position

// double x = 1;
inline void Position::clear_x() {
  x_ = 0;
}
inline double Position::x() const {
  // @@protoc_insertion_point(field_get:ProtoPose.Position.x)
  return x_;
}
inline void Position::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:ProtoPose.Position.x)
}

// double y = 2;
inline void Position::clear_y() {
  y_ = 0;
}
inline double Position::y() const {
  // @@protoc_insertion_point(field_get:ProtoPose.Position.y)
  return y_;
}
inline void Position::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:ProtoPose.Position.y)
}

// double z = 3;
inline void Position::clear_z() {
  z_ = 0;
}
inline double Position::z() const {
  // @@protoc_insertion_point(field_get:ProtoPose.Position.z)
  return z_;
}
inline void Position::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:ProtoPose.Position.z)
}

// -------------------------------------------------------------------

// Attitude

// double qw = 1;
inline void Attitude::clear_qw() {
  qw_ = 0;
}
inline double Attitude::qw() const {
  // @@protoc_insertion_point(field_get:ProtoPose.Attitude.qw)
  return qw_;
}
inline void Attitude::set_qw(double value) {
  
  qw_ = value;
  // @@protoc_insertion_point(field_set:ProtoPose.Attitude.qw)
}

// double qx = 2;
inline void Attitude::clear_qx() {
  qx_ = 0;
}
inline double Attitude::qx() const {
  // @@protoc_insertion_point(field_get:ProtoPose.Attitude.qx)
  return qx_;
}
inline void Attitude::set_qx(double value) {
  
  qx_ = value;
  // @@protoc_insertion_point(field_set:ProtoPose.Attitude.qx)
}

// double qy = 3;
inline void Attitude::clear_qy() {
  qy_ = 0;
}
inline double Attitude::qy() const {
  // @@protoc_insertion_point(field_get:ProtoPose.Attitude.qy)
  return qy_;
}
inline void Attitude::set_qy(double value) {
  
  qy_ = value;
  // @@protoc_insertion_point(field_set:ProtoPose.Attitude.qy)
}

// double qz = 4;
inline void Attitude::clear_qz() {
  qz_ = 0;
}
inline double Attitude::qz() const {
  // @@protoc_insertion_point(field_get:ProtoPose.Attitude.qz)
  return qz_;
}
inline void Attitude::set_qz(double value) {
  
  qz_ = value;
  // @@protoc_insertion_point(field_set:ProtoPose.Attitude.qz)
}

// -------------------------------------------------------------------

// Pose

// .ProtoPose.Position pos = 1;
inline bool Pose::has_pos() const {
  return this != internal_default_instance() && pos_ != NULL;
}
inline void Pose::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) {
    delete pos_;
  }
  pos_ = NULL;
}
inline const ::ProtoPose::Position& Pose::_internal_pos() const {
  return *pos_;
}
inline const ::ProtoPose::Position& Pose::pos() const {
  const ::ProtoPose::Position* p = pos_;
  // @@protoc_insertion_point(field_get:ProtoPose.Pose.pos)
  return p != NULL ? *p : *reinterpret_cast<const ::ProtoPose::Position*>(
      &::ProtoPose::_Position_default_instance_);
}
inline ::ProtoPose::Position* Pose::release_pos() {
  // @@protoc_insertion_point(field_release:ProtoPose.Pose.pos)
  
  ::ProtoPose::Position* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline ::ProtoPose::Position* Pose::mutable_pos() {
  
  if (pos_ == NULL) {
    auto* p = CreateMaybeMessage<::ProtoPose::Position>(GetArenaNoVirtual());
    pos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ProtoPose.Pose.pos)
  return pos_;
}
inline void Pose::set_allocated_pos(::ProtoPose::Position* pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pos_;
  }
  if (pos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:ProtoPose.Pose.pos)
}

// .ProtoPose.Attitude att = 2;
inline bool Pose::has_att() const {
  return this != internal_default_instance() && att_ != NULL;
}
inline void Pose::clear_att() {
  if (GetArenaNoVirtual() == NULL && att_ != NULL) {
    delete att_;
  }
  att_ = NULL;
}
inline const ::ProtoPose::Attitude& Pose::_internal_att() const {
  return *att_;
}
inline const ::ProtoPose::Attitude& Pose::att() const {
  const ::ProtoPose::Attitude* p = att_;
  // @@protoc_insertion_point(field_get:ProtoPose.Pose.att)
  return p != NULL ? *p : *reinterpret_cast<const ::ProtoPose::Attitude*>(
      &::ProtoPose::_Attitude_default_instance_);
}
inline ::ProtoPose::Attitude* Pose::release_att() {
  // @@protoc_insertion_point(field_release:ProtoPose.Pose.att)
  
  ::ProtoPose::Attitude* temp = att_;
  att_ = NULL;
  return temp;
}
inline ::ProtoPose::Attitude* Pose::mutable_att() {
  
  if (att_ == NULL) {
    auto* p = CreateMaybeMessage<::ProtoPose::Attitude>(GetArenaNoVirtual());
    att_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ProtoPose.Pose.att)
  return att_;
}
inline void Pose::set_allocated_att(::ProtoPose::Attitude* att) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete att_;
  }
  if (att) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      att = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, att, submessage_arena);
    }
    
  } else {
    
  }
  att_ = att;
  // @@protoc_insertion_point(field_set_allocated:ProtoPose.Pose.att)
}

// double time_stamp = 3;
inline void Pose::clear_time_stamp() {
  time_stamp_ = 0;
}
inline double Pose::time_stamp() const {
  // @@protoc_insertion_point(field_get:ProtoPose.Pose.time_stamp)
  return time_stamp_;
}
inline void Pose::set_time_stamp(double value) {
  
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:ProtoPose.Pose.time_stamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoPose

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_pose_2eproto
